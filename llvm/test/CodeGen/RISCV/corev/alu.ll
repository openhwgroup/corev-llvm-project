; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=riscv32 -mattr=+m -mattr=+xcvalu -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

declare i32 @llvm.abs.i32(i32, i1)
declare i32 @llvm.smin.i32(i32, i32)
declare i32 @llvm.smax.i32(i32, i32)
declare i32 @llvm.umin.i32(i32, i32)
declare i32 @llvm.umax.i32(i32, i32)

define i32 @abs(i32 %a) {
; CHECK-LABEL: abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.abs a0, a0
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.abs.i32(i32 %a, i1 false)
  ret i32 %1
}

define i1 @sle(i32 %a, i32 %b) {
; CHECK-LABEL: sle:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.sle a0, a0, a1
; CHECK-NEXT:    ret
  %1 = icmp sle i32 %a, %b
  ret i1 %1
}

define i1 @sleu(i32 %a, i32 %b) {
; CHECK-LABEL: sleu:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.sleu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = icmp ule i32 %a, %b
  ret i1 %1
}

define i32 @smin(i32 %a, i32 %b) {
; CHECK-LABEL: smin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.min a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.smin.i32(i32 %a, i32 %b)
  ret i32 %1
}

define i32 @umin(i32 %a, i32 %b) {
; CHECK-LABEL: umin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.minu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.umin.i32(i32 %a, i32 %b)
  ret i32 %1
}

define i32 @smax(i32 %a, i32 %b) {
; CHECK-LABEL: smax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.max a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.smax.i32(i32 %a, i32 %b)
  ret i32 %1
}

define i32 @umax(i32 %a, i32 %b) {
; CHECK-LABEL: umax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.maxu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.umax.i32(i32 %a, i32 %b)
  ret i32 %1
}

define i32 @exths(i16 %a) {
; CHECK-LABEL: exths:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x11 killed $x10
; CHECK-NEXT:    cv.exths a0, a0
; CHECK-NEXT:    ret
  %1 = sext i16 %a to i32
  ret i32 %1
}

define i32 @exthz(i16 %a) {
; CHECK-LABEL: exthz:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x11 killed $x10
; CHECK-NEXT:    cv.exthz a0, a0
; CHECK-NEXT:    ret
  %1 = zext i16 %a to i32
  ret i32 %1
}

define i32 @extbs(i8 %a) {
; CHECK-LABEL: extbs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x11 killed $x10
; CHECK-NEXT:    cv.extbs a0, a0
; CHECK-NEXT:    ret
  %1 = sext i8 %a to i32
  ret i32 %1
}

define i32 @extbz(i8 %a) {
; CHECK-LABEL: extbz:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x11 killed $x10
; CHECK-NEXT:    cv.extbz a0, a0
; CHECK-NEXT:    ret
  %1 = zext i8 %a to i32
  ret i32 %1
}

define i32 @clip(i32 %a) {
; CHECK-LABEL: clip:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clip a0, a0, 7
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.smax.i32(i32 %a, i32 -64)
  %2 = call i32 @llvm.smin.i32(i32 %1, i32 63)
  ret i32 %2
}

define i32 @clipr(i32 %a, i32 %b) {
; CHECK-LABEL: clipr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clipr a0, a0, a1
; CHECK-NEXT:    ret
  %1 = xor i32 %b, -1
  %2 = call i32 @llvm.smax.i32(i32 %a, i32 %1)
  %3 = call i32 @llvm.smin.i32(i32 %2, i32 %b)
  ret i32 %3
}

define i32 @clipu(i32 %a) {
; CHECK-LABEL: clipu:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clipu a0, a0, 5
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.smax.i32(i32 %a, i32 0)
  %2 = call i32 @llvm.smin.i32(i32 %1, i32 15)
  ret i32 %2
}

define i32 @clipur(i32 %a, i32 %b) {
; CHECK-LABEL: clipur:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clipur a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.smax.i32(i32 %a, i32 0)
  %2 = call i32 @llvm.smin.i32(i32 %1, i32 %b)
  ret i32 %2
}

define i32 @addN(i32 %a, i32 %b) {
; CHECK-LABEL: addN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = ashr i32 %1, 5
  ret i32 %2
}

define i32 @adduN(i32 %a, i32 %b) {
; CHECK-LABEL: adduN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.adduN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = lshr i32 %1, 5
  ret i32 %2
}

define i32 @addRN(i32 %a, i32 %b) {
; CHECK-LABEL: addRN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addRN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = add i32 %1, 16
  %3 = ashr i32 %2, 5
  ret i32 %3
}

define i32 @adduRN(i32 %a, i32 %b) {
; CHECK-LABEL: adduRN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.adduRN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = add i32 %1, 16
  %3 = lshr i32 %2, 5
  ret i32 %3
}

define i32 @addNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: addNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = ashr i32 %1, %c
  ret i32 %2
}

define i32 @adduNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: adduNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.adduNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = lshr i32 %1, %c
  ret i32 %2
}

define i32 @addRNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: addRNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = shl i32 1, %c
  %3 = lshr i32 %2, 1
  %4 = add i32 %1, %3
  %5 = ashr i32 %4, %c
  ret i32 %5
}

define i32 @adduRNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: adduRNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.adduRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = add i32 %a, %b
  %2 = shl i32 1, %c
  %3 = lshr i32 %2, 1
  %4 = add i32 %1, %3
  %5 = lshr i32 %4, %c
  ret i32 %5
}

define i32 @subN(i32 %a, i32 %b) {
; CHECK-LABEL: subN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = ashr i32 %1, 5
  ret i32 %2
}

define i32 @subuN(i32 %a, i32 %b) {
; CHECK-LABEL: subuN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = lshr i32 %1, 5
  ret i32 %2
}

define i32 @subRN(i32 %a, i32 %b) {
; CHECK-LABEL: subRN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subRN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = add i32 %1, 16
  %3 = ashr i32 %2, 5
  ret i32 %3
}

define i32 @subuRN(i32 %a, i32 %b) {
; CHECK-LABEL: subuRN:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuRN a0, a0, a1, 5
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = add i32 %1, 16
  %3 = lshr i32 %2, 5
  ret i32 %3
}

define i32 @subNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: subNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = ashr i32 %1, %c
  ret i32 %2
}

define i32 @subuNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: subuNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = lshr i32 %1, %c
  ret i32 %2
}

define i32 @subRNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: subRNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = shl i32 1, %c
  %3 = lshr i32 %2, 1
  %4 = add i32 %1, %3
  %5 = ashr i32 %4, %c
  ret i32 %5
}

define i32 @subuRNr(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: subuRNr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = sub i32 %a, %b
  %2 = shl i32 1, %c
  %3 = lshr i32 %2, 1
  %4 = add i32 %1, %3
  %5 = lshr i32 %4, %c
  ret i32 %5
}

declare i32 @llvm.riscv.cv.alu.slet(i32, i32)

define i32 @test.cv.alu.slet(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.slet:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.sle a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.slet(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.sletu(i32, i32)

define i32 @test.cv.alu.sletu(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.sletu:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.sleu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.sletu(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.min(i32, i32)

define i32 @test.cv.alu.min(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.min:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.min a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.min(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.minu(i32, i32)

define i32 @test.cv.alu.minu(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.minu:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.minu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.minu(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.max(i32, i32)

define i32 @test.cv.alu.max(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.max:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.max a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.max(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.maxu(i32, i32)

define i32 @test.cv.alu.maxu(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.maxu:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.maxu a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.maxu(i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.exths(i32)

define i32 @test.cv.alu.exths(i32 %a) {
; CHECK-LABEL: test.cv.alu.exths:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.exths a0, a0
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.exths(i32 %a)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.exthz(i32)

define i32 @test.cv.alu.exthz(i32 %a) {
; CHECK-LABEL: test.cv.alu.exthz:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.exthz a0, a0
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.exthz(i32 %a)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.extbs(i32)

define i32 @test.cv.alu.extbs(i32 %a) {
; CHECK-LABEL: test.cv.alu.extbs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extbs a0, a0
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.extbs(i32 %a)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.extbz(i32)

define i32 @test.cv.alu.extbz(i32 %a) {
; CHECK-LABEL: test.cv.alu.extbz:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.extbz a0, a0
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.extbz(i32 %a)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.clip(i32, i32)

define i32 @test.cv.alu.clip.case.a(i32 %a) {
; CHECK-LABEL: test.cv.alu.clip.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clip a0, a0, 5
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.clip(i32 %a, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.clip.case.b(i32 %a) {
; CHECK-LABEL: test.cv.alu.clip.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a1, 10
; CHECK-NEXT:    cv.clipr a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.clip(i32 %a, i32 10)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.clipu(i32, i32)

define i32 @test.cv.alu.clipu.case.a(i32 %a) {
; CHECK-LABEL: test.cv.alu.clipu.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.clipu a0, a0, 9
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.clipu(i32 %a, i32 255)
  ret i32 %1
}

define i32 @test.cv.alu.clipu.case.b(i32 %a) {
; CHECK-LABEL: test.cv.alu.clipu.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a1, 200
; CHECK-NEXT:    cv.clipur a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.clipu(i32 %a, i32 200)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.addN(i32, i32, i32)

define i32 @test.cv.alu.addN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.addN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.addN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.addN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.addN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.addNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.addN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.adduN(i32, i32, i32)

define i32 @test.cv.alu.adduN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.adduN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.adduN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.adduN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.adduN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.adduN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.adduNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.adduN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.addRN(i32, i32, i32)

define i32 @test.cv.alu.addRN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.addRN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.addRN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.addRN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.addRN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.addRN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.addRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.addRN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.adurn(i32, i32, i32)

define i32 @test.cv.alu.adurn.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.adurn.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -4
; CHECK-NEXT:    li a2, 15
; CHECK-NEXT:    call llvm.riscv.cv.alu.adurn@plt
; CHECK-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.adurn(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.adurn.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.adurn.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -4
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    call llvm.riscv.cv.alu.adurn@plt
; CHECK-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.adurn(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.subN(i32, i32, i32)

define i32 @test.cv.alu.subN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.subN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.subNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.subuN(i32, i32, i32)

define i32 @test.cv.alu.subuN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subuN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subuN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.subuN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subuN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.subuNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subuN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.subRN(i32, i32, i32)

define i32 @test.cv.alu.subRN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subRN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subRN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subRN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.subRN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subRN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.subRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subRN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.alu.subuRN(i32, i32, i32)

define i32 @test.cv.alu.subuRN.case.a(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subuRN.case.a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.subuRN a0, a0, a1, 15
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subuRN(i32 %a, i32 %b, i32 15)
  ret i32 %1
}

define i32 @test.cv.alu.subuRN.case.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.alu.subuRN.case.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a2, 32
; CHECK-NEXT:    cv.subuRNr a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.alu.subuRN(i32 %a, i32 %b, i32 32)
  ret i32 %1
}
